// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ldapr_init
SEXP ldapr_init(SEXP ldap_uri);
RcppExport SEXP _ldapr_ldapr_init(SEXP ldap_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ldap_uri(ldap_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_init(ldap_uri));
    return rcpp_result_gen;
END_RCPP
}
// ldapr_bind_s
int ldapr_bind_s(SEXP l, SEXP bind_dn, SEXP bind_pw);
RcppExport SEXP _ldapr_ldapr_bind_s(SEXP lSEXP, SEXP bind_dnSEXP, SEXP bind_pwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type l(lSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bind_dn(bind_dnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bind_pw(bind_pwSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_bind_s(l, bind_dn, bind_pw));
    return rcpp_result_gen;
END_RCPP
}
// ldapr_is_ldap_url
int ldapr_is_ldap_url(SEXP ldap_uri);
RcppExport SEXP _ldapr_ldapr_is_ldap_url(SEXP ldap_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ldap_uri(ldap_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_is_ldap_url(ldap_uri));
    return rcpp_result_gen;
END_RCPP
}
// ldapr_search
DataFrame ldapr_search(SEXP f, SEXP at, SEXP l, SEXP bd);
RcppExport SEXP _ldapr_ldapr_search(SEXP fSEXP, SEXP atSEXP, SEXP lSEXP, SEXP bdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type at(atSEXP);
    Rcpp::traits::input_parameter< SEXP >::type l(lSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bd(bdSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_search(f, at, l, bd));
    return rcpp_result_gen;
END_RCPP
}
// ldapr_unbind
int ldapr_unbind(SEXP l);
RcppExport SEXP _ldapr_ldapr_unbind(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_unbind(l));
    return rcpp_result_gen;
END_RCPP
}
// ldapr_url_parse
int ldapr_url_parse(SEXP ldap_uri);
RcppExport SEXP _ldapr_ldapr_url_parse(SEXP ldap_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ldap_uri(ldap_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(ldapr_url_parse(ldap_uri));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldapr_ldapr_init", (DL_FUNC) &_ldapr_ldapr_init, 1},
    {"_ldapr_ldapr_bind_s", (DL_FUNC) &_ldapr_ldapr_bind_s, 3},
    {"_ldapr_ldapr_is_ldap_url", (DL_FUNC) &_ldapr_ldapr_is_ldap_url, 1},
    {"_ldapr_ldapr_search", (DL_FUNC) &_ldapr_ldapr_search, 3},
    {"_ldapr_ldapr_unbind", (DL_FUNC) &_ldapr_ldapr_unbind, 1},
    {"_ldapr_ldapr_url_parse", (DL_FUNC) &_ldapr_ldapr_url_parse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldapr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
